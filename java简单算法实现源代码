import java.awt.*;
import java.awt.event.*;
import java.util.Stack;

import javax.swing.*;

public class AlgorithmGUI extends JFrame implements ActionListener {
    private JTextField inputField;
    private JTextArea outputArea;
    private JButton evaluateButton, sortButton, searchButton;

    public AlgorithmGUI() {
        super("Algorithm GUI");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLocationRelativeTo(null);

        inputField = new JTextField(20);
        outputArea = new JTextArea(10, 30);
        outputArea.setEditable(false);

        evaluateButton = new JButton("Evaluate");
        sortButton = new JButton("Sort");
        searchButton = new JButton("Search");

        evaluateButton.addActionListener(this);
        sortButton.addActionListener(this);
        searchButton.addActionListener(this);

        JPanel inputPanel = new JPanel();
        inputPanel.add(new JLabel("Input:"));
        inputPanel.add(inputField);

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(evaluateButton);
        buttonPanel.add(sortButton);
        buttonPanel.add(searchButton);

        JPanel outputPanel = new JPanel();
        outputPanel.add(new JLabel("Output:"));
        outputPanel.add(new JScrollPane(outputArea));

        Container contentPane = getContentPane();
        contentPane.setLayout(new BorderLayout());
        contentPane.add(inputPanel, BorderLayout.NORTH);
        contentPane.add(buttonPanel, BorderLayout.CENTER);
        contentPane.add(outputPanel, BorderLayout.SOUTH);
    }

    public void actionPerformed(ActionEvent e) {
        String input = inputField.getText();
        if (e.getSource() == evaluateButton) {
            double result = evaluateExpression(input);
            outputArea.setText(Double.toString(result));
        } else if (e.getSource() == sortButton) {
            int[] array = parseArray(input);
            heapSort(array);
            outputArea.setText(arrayToString(array));
        } else if (e.getSource() == searchButton) {
            String text = input.substring(0, input.indexOf(','));
            String pattern = input.substring(input.indexOf(',') + 1);
            int index = kmpSearch(text, pattern);
            outputArea.setText(Integer.toString(index));
        }
    }
    private double evaluateExpression(String expression) {
        Stack<Double> operandStack = new Stack<>();
        Stack<Character> operatorStack = new Stack<>();
        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);
            if (ch >= '0' && ch <= '9') {
                // 处理数字
                int j = i;
                while (j < expression.length() && (expression.charAt(j) >= '0' && expression.charAt(j) <= '9' || expression.charAt(j) == '.')) {
                    j++;
                }
                double operand = Double.parseDouble(expression.substring(i, j));
                operandStack.push(operand);
                i = j - 1;
            } else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
                // 处理操作符
                while (!operatorStack.isEmpty() && (operatorStack.peek() == '*' || operatorStack.peek() == '/') && (ch == '+' || ch == '-'
                        || ch == '*' || ch == '/')) {
                    char operator = operatorStack.pop();
                    double operand2 = operandStack.pop();
                    double operand1 = operandStack.pop();
                    double result = applyOperator(operator, operand1, operand2);
                    operandStack.push(result);
                }
                operatorStack.push(ch);
            } else if (ch == '(') {
                // 处理左括号
                operatorStack.push(ch);
            } else if (ch == ')') {
                // 处理右括号
                while (operatorStack.peek() != '(') {
                    char operator = operatorStack.pop();
                    double operand2 = operandStack.pop();
                    double operand1 = operandStack.pop();
                    double result = applyOperator(operator, operand1, operand2);
                    operandStack.push(result);
                }
                operatorStack.pop();
            }
        }
        while (!operatorStack.isEmpty()) {
            char operator = operatorStack.pop();
            double operand2 = operandStack.pop();
            double operand1 = operandStack.pop();
            double result = applyOperator(operator, operand1, operand2);
            operandStack.push(result);
        }
        return operandStack.pop();
    }

    private double applyOperator(char operator, double operand1, double operand2) {
        switch (operator) {
            case '+':
                return operand1 + operand2;
            case '-':
                return operand1 - operand2;
            case '*':
                return operand1 * operand2;
            case '/':
                return operand1 / operand2;
            default:
                throw new IllegalArgumentException("Invalid operator: " + operator);
        }
    }


    private int[] parseArray(String input) {
        String[] tokens = input.split("\\s*,\\s*");
        int[] array = new int[tokens.length];
        for (int i = 0; i < tokens.length; i++) {
            array[i] = Integer.parseInt(tokens[i]);
        }
        return array;
    }
 
    private void heapSort(int[] array) {
        int n = array.length;

        // 构建大根堆
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(array, n, i);
        }

        // 依次取出堆顶元素，放到数组末尾
        for (int i = n - 1; i >= 0; i--) {
            // 将堆顶元素与末尾元素交换
            int temp = array[0];
            array[0] = array[i];
            array[i] = temp;

            // 对剩余的元素重新构建大根堆
            heapify(array, i, 0);
        }
    }

    // 将以root为根的子树构建成大根堆
    private void heapify(int[] array, int n, int root) {
        int largest = root; // 初始化最大值为根节点
        int left = 2 * root + 1; // 左子节点的索引
        int right = 2 * root + 2; // 右子节点的索引

        // 找出最大值
        if (left < n && array[left] > array[largest]) {
            largest = left;
        }
        if (right < n && array[right] > array[largest]) {
            largest = right;
        }

        // 如果最大值不是根节点，则交换根节点和最大值，并递归地对子树进行堆化
        if (largest != root) {
            int temp = array[root];
            array[root] = array[largest];
            array[largest] = temp;
            heapify(array, n, largest);
        }
    }

    private int kmpSearch(String text, String pattern) {
        int n = text.length();
        int m = pattern.length();

        // 构建next数组
        int[] next = new int[m];
        next[0] = -1;
        int i = 0, j = -1;
        while (i < m - 1) {
            if (j == -1 || pattern.charAt(i) == pattern.charAt(j)) {
                i++;
                j++;
                next[i] = j;
            } else {
                j = next[j];
            }
        }

        // 在文本串中查找模式串
        i = 0;
        j = 0;
        while (i < n && j < m) {
            if (j == -1 || text.charAt(i) == pattern.charAt(j)) {
                i++;
                j++;
            } else {
                j = next[j];
            }
        }

        if (j == m) {
            return i - j; // 匹配成功，返回匹配的起始位置
        } else {
            return -1; // 匹配失败，返回-1
        }
    }

    private String arrayToString(int[] array) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < array.length; i++) {
            sb.append(array[i]);
            if (i < array.length - 1) {
                sb.append(", ");
            }
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        AlgorithmGUI gui = new AlgorithmGUI();
        gui.setVisible(true);
    }
}
